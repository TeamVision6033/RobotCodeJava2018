// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6033.RobotCodeJava2018.subsystems;

import org.usfirst.frc6033.RobotCodeJava2018.RobotMap;
import org.usfirst.frc6033.RobotCodeJava2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Joystick;

/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController right = RobotMap.driveRight;
    private final SpeedController left = RobotMap.driveLeft;
    private final RobotDrive motors = RobotMap.driveMotors;
    private final Encoder encoderLeft = RobotMap.driveEncoderLeft;
    private final Encoder encoderRight = RobotMap.driveEncoderRight;
    private final Ultrasonic frontSonar = RobotMap.driveFrontSonar;
    private final Ultrasonic sideSonar = RobotMap.driveSideSonar;
    private final Ultrasonic rearSonar = RobotMap.driveRearSonar;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final ADXRS450_Gyro gyro = RobotMap.driveGyro;
    
    //private final ADXRS450_Gyro gyro = RobotMap.driveGyro;

	private static int CosntLeftFR = -1;
	private static int ConstRightFR = -1;

	public static final int DirectionLeft = -1;
	public static final int DriectionRight = 1;
	
    private double savedHeading;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveArcadeMode());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void DriveStraight(double speed) {
		this.motors.tankDrive(speed * CosntLeftFR, speed * ConstRightFR);
	}

	public void Turn(double speed, int direction) {
		this.motors.tankDrive(speed * CosntLeftFR * direction, speed * ConstRightFR * -1 * direction);
	}

	public void Stop() {
		this.motors.stopMotor();
	}

	public void ArcadeDrive(Joystick DriveStick) {
		this.motors.arcadeDrive(DriveStick);
	}

	public void ArcadeDrive(double moveValue, double rotateValue, boolean squaredInputs) {
		this.motors.arcadeDrive(moveValue, rotateValue, squaredInputs);
	}

	public double getFrontSonarDistance() {
		return this.frontSonar.getRangeInches();
	}
	
	public void calibrateGyro()
	{
		this.gyro.calibrate();
		//gyro.initSendable(builder);
	}
	
	public void resetGyro()
	{
		this.gyro.reset();
	}

	public double getGyroAngle() {
		return this.gyro.getAngle();
	}

	public double getDistanceLeftEncoder() {
		return this.encoderLeft.getDistance();
	}

	public double getDistanceRightEncoder() {
		return this.encoderRight.getDistance();
	}

	public double getDistance() {
		return (getDistanceLeftEncoder() + getDistanceRightEncoder()) / 2;
	}

	public void resetEncoders() {
		this.encoderLeft.reset();
		this.encoderRight.reset();
	}

	public void setEncodersReverse() {
		this.encoderLeft.setReverseDirection(false);
		this.encoderRight.setReverseDirection(true);
	}

	public void setEncodersForward() {
		this.encoderLeft.setReverseDirection(true);
		this.encoderRight.setReverseDirection(false);
	}
	
    public void setSavedHeading(double heading)
    {
    	this.savedHeading = heading;
    }
    
    public double getSavedHeading()
    {
    	return this.savedHeading;
    }
    
}

