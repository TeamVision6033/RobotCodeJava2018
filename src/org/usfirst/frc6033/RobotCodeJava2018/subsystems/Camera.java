// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6033.RobotCodeJava2018.subsystems;

import org.usfirst.frc6033.RobotCodeJava2018.RobotMap;
import org.usfirst.frc6033.RobotCodeJava2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Servo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Camera extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Servo panServo = RobotMap.cameraPanServo;
    private final Relay lightRingInner = RobotMap.cameraLightRingInner;
    private final Relay lightRingMiddle = RobotMap.cameraLightRingMiddle;
    private final Relay lightRingOuter = RobotMap.cameraLightRingOuter;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Relay logoLight = RobotMap.logoLight;
	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		lightRingInner.set(Relay.Value.kOff);
		lightRingMiddle.set(Relay.Value.kOff);
		lightRingOuter.set(Relay.Value.kOff);
		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop
	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public void allLights(boolean lightsOn) {
		if (lightsOn) {
			lightRingInner.set(Relay.Value.kOn);
			lightRingMiddle.set(Relay.Value.kOn);
			lightRingOuter.set(Relay.Value.kOn);
		} else {
			lightRingInner.set(Relay.Value.kOff);
			lightRingMiddle.set(Relay.Value.kOff);
			lightRingOuter.set(Relay.Value.kOff);
		}
	}

	public void light(int light) {
		if (light == 1) {
			lightRingInner.set(Relay.Value.kOn);
			lightRingMiddle.set(Relay.Value.kOff);
			lightRingOuter.set(Relay.Value.kOff);
		} else if (light == 2) {
			lightRingInner.set(Relay.Value.kOff);
			lightRingMiddle.set(Relay.Value.kOn);
			lightRingOuter.set(Relay.Value.kOff);
		} else if (light == 3) {
			lightRingInner.set(Relay.Value.kOff);
			lightRingMiddle.set(Relay.Value.kOff);
			lightRingOuter.set(Relay.Value.kOn);
		} else {
			lightRingInner.set(Relay.Value.kOff);
			lightRingMiddle.set(Relay.Value.kOff);
			lightRingOuter.set(Relay.Value.kOff);
		}
	}
	
	public void setPanServoAngle(double value)
	{
		panServo.setAngle(value);
	}
	public double getPanServoAngle()
	{
		return panServo.getAngle();
	}
	public void setAllianceColor(String color) {
		if (color == "Red")
			logoLight.set(Relay.Value.kOff);
		else {
			logoLight.set(Relay.Value.kOn);
		}
		
	}
	public void toggleLogoLight() {
		if (!logoLight.get().toString().equals("kOff"))
			logoLight.set(Relay.Value.kOff);
		else{
			logoLight.set(Relay.Value.kOn);
		}
	}
}
