// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6033.RobotCodeJava2018;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveRight;
    public static SpeedController driveLeft;
    public static RobotDrive driveMotors;
    public static Encoder driveEncoderLeft;
    public static Encoder driveEncoderRight;
    public static Ultrasonic driveFrontSonar;
    public static Ultrasonic driveSideSonarRight;
    public static Ultrasonic driveSideSonarLeft;
    public static Ultrasonic driveRearSonar;
    public static Servo cameraPanServo;
    public static Relay cameraLightRingInner;
    public static Relay cameraLightRingMiddle;
    public static Relay cameraLightRingOuter;
    public static Servo topCameraTiltServo;
    public static SpeedController elevatorInnerSection;
    public static SpeedController elevatorOuterSection;
    public static SpeedController elevatorForkWheels;
    public static DoubleSolenoid elevatorForkPincher;
    public static SpeedController elevatorForkTilt;
    public static Encoder elevatorInnerSectionEncoder;
    public static Encoder elevatorOuterSectionEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static ADXRS450_Gyro driveGyro;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveRight = new VictorSP(0);
        LiveWindow.addActuator("Drive", "Right", (VictorSP) driveRight);
        driveRight.setInverted(false);
        driveLeft = new VictorSP(1);
        LiveWindow.addActuator("Drive", "Left", (VictorSP) driveLeft);
        driveLeft.setInverted(false);
        driveMotors = new RobotDrive(driveLeft, driveRight);
        
        driveMotors.setSafetyEnabled(false);
        driveMotors.setExpiration(0.1);
        driveMotors.setSensitivity(0.5);
        driveMotors.setMaxOutput(1.0);

        driveEncoderLeft = new Encoder(0, 1, true, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "EncoderLeft", driveEncoderLeft);
        driveEncoderLeft.setDistancePerPulse(0.053855829);
        driveEncoderLeft.setPIDSourceType(PIDSourceType.kRate);
        driveEncoderRight = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "EncoderRight", driveEncoderRight);
        driveEncoderRight.setDistancePerPulse(0.053855829);
        driveEncoderRight.setPIDSourceType(PIDSourceType.kRate);
        driveFrontSonar = new Ultrasonic(4, 5);
        LiveWindow.addSensor("Drive", "FrontSonar", driveFrontSonar);
        
        driveSideSonarRight = new Ultrasonic(6, 7);
        LiveWindow.addSensor("Drive", "SideSonarRight", driveSideSonarRight);
        
        driveSideSonarLeft = new Ultrasonic(10, 11);
        LiveWindow.addSensor("Drive", "SideSonarLeft", driveSideSonarLeft);
        
        driveRearSonar = new Ultrasonic(8, 9);
        LiveWindow.addSensor("Drive", "RearSonar", driveRearSonar);
        
        cameraPanServo = new Servo(2);
        LiveWindow.addActuator("Camera", "PanServo", cameraPanServo);
        
        cameraLightRingInner = new Relay(0);
        LiveWindow.addActuator("Camera", "LightRingInner", cameraLightRingInner);
        
        cameraLightRingMiddle = new Relay(1);
        LiveWindow.addActuator("Camera", "LightRingMiddle", cameraLightRingMiddle);
        
        cameraLightRingOuter = new Relay(2);
        LiveWindow.addActuator("Camera", "LightRingOuter", cameraLightRingOuter);
        
        topCameraTiltServo = new Servo(3);
        LiveWindow.addActuator("TopCamera", "TiltServo", topCameraTiltServo);
        
        elevatorInnerSection = new Spark(4);
        LiveWindow.addActuator("Elevator", "InnerSection", (Spark) elevatorInnerSection);
        elevatorInnerSection.setInverted(false);
        elevatorOuterSection = new Spark(5);
        LiveWindow.addActuator("Elevator", "OuterSection", (Spark) elevatorOuterSection);
        elevatorOuterSection.setInverted(false);
        elevatorForkWheels = new Victor(6);
        LiveWindow.addActuator("Elevator", "ForkWheels", (Victor) elevatorForkWheels);
        elevatorForkWheels.setInverted(false);
        elevatorForkPincher = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Elevator", "ForkPincher", elevatorForkPincher);
        
        elevatorForkTilt = new Victor(7);
        LiveWindow.addActuator("Elevator", "ForkTilt", (Victor) elevatorForkTilt);
        elevatorForkTilt.setInverted(false);
        elevatorInnerSectionEncoder = new Encoder(12, 13, false, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "InnerSectionEncoder", elevatorInnerSectionEncoder);
        elevatorInnerSectionEncoder.setDistancePerPulse(1.0);
        elevatorInnerSectionEncoder.setPIDSourceType(PIDSourceType.kRate);
        elevatorOuterSectionEncoder = new Encoder(14, 15, false, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "OuterSectionEncoder", elevatorOuterSectionEncoder);
        elevatorOuterSectionEncoder.setDistancePerPulse(1.0);
        elevatorOuterSectionEncoder.setPIDSourceType(PIDSourceType.kRate);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveGyro = new ADXRS450_Gyro();
		LiveWindow.addSensor("Drive", "Gyro", driveGyro);
		driveGyro.calibrate();
		topCameraTiltServo.setSubsystem("TopCamera");
		 cameraLightRingInner.setDirection(Relay.Direction.kBoth);
		 cameraLightRingMiddle.setDirection(Relay.Direction.kBoth);
		 cameraLightRingOuter.setDirection(Relay.Direction.kBoth);
    }
}
