// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6033.RobotCodeJava2018.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc6033.RobotCodeJava2018.Robot;

/**
 *
 */
public class DriveTurn extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private int m_direction;
	private double m_speed;
	private double m_timeLimit;
	private double m_degrees;
	private double fudgefactor;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private double targetHeading;
	private double currentHeading;
	private double degreesRemaining = 999;
	static final double decelDegrees = 25;
	static final double minDecelSpeed = 0.2;
	static final double angleTolerance = 0.4;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveTurn(int direction, double speed, double timeLimit, double degrees) {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		direction = (direction > 0) ? 1 : -1;

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_direction = direction;
		m_speed = speed;
		m_timeLimit = timeLimit;
		m_degrees = degrees;
		fudgefactor =  (direction > 0) ? 0 : 3;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.drive);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		degreesRemaining = degrees;
		Robot.drive.resetGyro();
		currentHeading = Robot.drive.getGyroAngle();
		if (degrees > 0)
			targetHeading = Robot.drive.getGyroAngle() + ((degrees + fudgefactor) * direction);
		if (timeLimit > 0)
			setTimeout(m_timeLimit);
	}

	// Called just before this Command runs the first time
	@Override
	protected void initialize() {
		degreesRemaining = m_degrees;
		Robot.drive.resetGyro();
		currentHeading = Robot.drive.getGyroAngle();
		targetHeading = Robot.drive.getGyroAngle() + ((m_degrees+fudgefactor) * m_direction);
	}

	// Called repeatedly when this Command is scheduled to run
	@Override
	protected void execute() {
		currentHeading = Robot.drive.getGyroAngle();
		degreesRemaining = (targetHeading - currentHeading) * m_direction;

		double calcSpeed = getSpeedDecel(degreesRemaining);

		Robot.drive.Turn(calcSpeed, m_direction);
	}

	private double getSpeedDecel(double degreesRemaining) {
		double newSpeed = m_speed;
		double tmpSpeed = 0;
		if (degreesRemaining < decelDegrees) {
			if (newSpeed > minDecelSpeed) {
				tmpSpeed = degreesRemaining / decelDegrees * (1 - minDecelSpeed) + minDecelSpeed;
				if (newSpeed > tmpSpeed)
					newSpeed = tmpSpeed;
			}
		}
		return newSpeed;
	}

	// Make this return true when this Command no longer needs to run execute()
	@Override
	protected boolean isFinished() {
		if (degreesRemaining - angleTolerance <= 0) {

			return true;
		}

		if (this.isTimedOut()) {

			return true;
		}
		return false;
	}

	// Called once after isFinished returns true
	@Override
	protected void end() {
		Robot.drive.Stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted() {
		this.end();
	}
}
