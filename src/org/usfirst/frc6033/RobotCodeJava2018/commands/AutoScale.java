// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6033.RobotCodeJava2018.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc6033.RobotCodeJava2018.Robot;
import org.usfirst.frc6033.RobotCodeJava2018.commands.DriveReturnToSetHeading;
import org.usfirst.frc6033.RobotCodeJava2018.commands.DriveStop;
import org.usfirst.frc6033.RobotCodeJava2018.commands.DriveStraight;
import org.usfirst.frc6033.RobotCodeJava2018.subsystems.*;

/**
 *
 */
public class AutoScale extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutoScale() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	SmartDashboard.putString("CurrentStep", "Forward");
    	//double speed, double timeLimit, double distance, double stopAtDistance) {
    	addSequential(new DriveStraight(Robot.AutoSpeed, 15, 60, 12));
    	addSequential(new DriveStop(.25));
    	addSequential(new DriveReturnToSetHeading());
    	//public DriveTurn(int direction, double speed, double timeLimit, double degrees) {
    	addSequential(new DriveTurn(Robot.drive.DirectionLeft, Robot.AutoTurnSpeed, 0, 74.75));
    	addSequential(new DriveStop(.5));
    	addSequential(new DriveStraight(Robot.AutoSpeed, 15, 152, 12));
    	addSequential(new DriveStop(.5));
    	addSequential(new DriveReturnToSetHeading());
    	addSequential(new DriveTurn(Robot.drive.DirectionLeft, Robot.AutoTurnSpeed, 0, 74.75));
    	addSequential(new DriveStop(.5));
    	addSequential(new DriveStraight(Robot.AutoSpeed, 15, 90, 12));
    	addSequential(new DriveStop(.5));
    	addSequential(new DriveTurn(Robot.drive.DirectionLeft, Robot.AutoTurnSpeed, 0, 74.75));
    	addSequential(new DriveStop(.5));
    	addSequential(new DriveStraight(Robot.AutoSpeed, 15, 152, 12));
    	addSequential(new DriveStop(.5));
    	addSequential(new DriveTurn(Robot.drive.DirectionLeft, Robot.AutoTurnSpeed, 0, 74.75));
    	//addSequential(new GearOpen());
//    	SmartDashboard.putString("CurrentStep", "Stop");
//    	addSequential(new DriveStop(3));
//    	SmartDashboard.putString("CurrentStep", "Back");
//    	addSequential(new DriveStraight(-Robot.AutoSpeed, 15, 60, 0));
//    	SmartDashboard.putString("CurrentStep", "End");
// 
    } 
}
