// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6033.RobotCodeJava2018.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc6033.RobotCodeJava2018.Robot;

/**
 *
 */
public class DriveStraight extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_speed;
	private double m_timeLimit;
	private double m_distance;
	private double m_stopAtDistance;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private int direction = 1;
	private double frontSonarDistance = 0;
	private double rearSonarDistance = 0;
	private double timeLimit = 0;
	private double distanceLimit = 0;
	private double stopAtDistance = 0;
	private double distanceTraveled = 0;
	private double gyroAngle = 0;
	private double initialAngle = 0;
	private double distanceRemaining = 9999;
	private double coastDistance = 0;
	private double maxCoastDistance = 6.5;
	private double coastStep = 0.35;
	private double distanceFromRear;
	static final double Kp = 0.06;
	static final double SonarFactor = .01;
	static final double maxSteer = 0.1;
	private double decelDistance = 30;
	static final double minDecelSpeed = 0.15;
	static final double distanceTolerance = 0.1;
	private String exitReason = "unknown";
	private double initialSideDistance;

	private boolean followSide = false;


	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveStraight(double speed, double timeLimit, double distance, double stopAtDistance, boolean followSide, double distanceFromRear) {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_speed = speed;
		m_timeLimit = timeLimit;
		m_distance = distance;
		m_stopAtDistance = stopAtDistance;
		this.distanceFromRear = distanceFromRear;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		this.decelDistance = 25 * Math.abs(speed);
		this.timeLimit = timeLimit;
		this.distanceLimit = distance;
		this.stopAtDistance = stopAtDistance;
		this.followSide = followSide;
		if (timeLimit > 0)
			setTimeout(timeLimit);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		if (m_speed < 0)
			direction = -1;
		initialAngle = Robot.drive.getGyroAngle();
		Robot.drive.resetEncoders();
		distanceTraveled = 0;
		distanceRemaining = 9999;
		coastDistance = 0;
	}

	// Called just before this Command runs the first time
	@Override
	protected void initialize() {
		if (m_speed < 0)
			direction = -1;
		initialAngle = Robot.drive.getGyroAngle();
		Robot.drive.setSavedHeading(initialAngle);
		SmartDashboard.putNumber("SavedHeading", Robot.drive.getSavedHeading());
		Robot.drive.resetEncoders();
		initialSideDistance = Robot.drive.getSideSonarDistance();
		frontSonarDistance = Robot.drive.getFrontSonarDistance();
		rearSonarDistance = Robot.drive.getRearSonarDistance();

		distanceTraveled = 0;
		distanceRemaining = 9999;
		coastDistance = 0;
	}

	// Called repeatedly when this Command is scheduled to run
	@Override
	protected void execute() {
		if (coastDistance < maxCoastDistance) {
			coastDistance += coastStep;
		}
		frontSonarDistance = Robot.drive.getFrontSonarDistance();
		rearSonarDistance = Robot.drive.getRearSonarDistance();
		distanceTraveled = Robot.drive.getDistance() * direction;

		SmartDashboard.putNumber("DistanceTraveled", distanceTraveled);

		if (distanceLimit > 0) {
			exitReason = "Distance Limit Exceeded";
			distanceRemaining = distanceLimit - distanceTraveled;
		}
		if (frontSonarDistance > 0 && stopAtDistance > 0 && distanceRemaining > frontSonarDistance - stopAtDistance) {
			SmartDashboard.putString("ExitReason", "XXXXXXXXX");
			exitReason = "Reached Stop At Distance";
			distanceRemaining = frontSonarDistance - stopAtDistance;
		}
		if (rearSonarDistance > 0 && distanceFromRear > 0)
		{
			distanceRemaining = distanceFromRear - rearSonarDistance;
		}

		SmartDashboard.putNumber("distanceFromRear", distanceFromRear);
		SmartDashboard.putNumber("DistanceRemaining", distanceRemaining);
		SmartDashboard.putNumber("DistanceLimit", distanceLimit);
		SmartDashboard.putNumber("StopAtDistance", stopAtDistance);
		SmartDashboard.putNumber("CoastDistance", coastDistance);

		double calcSpeed = getSpeedDecel(distanceRemaining);

		gyroAngle = Robot.drive.getGyroAngle();

		// Robot.drive.DriveStraight(calcSpeed);
		SmartDashboard.putNumber("effSpeet", calcSpeed);
		SmartDashboard.putBoolean("followSide", followSide);
		SmartDashboard.putNumber("InitialSideDistance", initialSideDistance);
		double steer;
		double corrInitialAngle;
		if (followSide && initialSideDistance > 0) {
			double distanceDiff = Robot.drive.getSideSonarDistance() - initialSideDistance;
			corrInitialAngle = getCorrAngle(initialAngle, distanceDiff);
		} else {
			corrInitialAngle = initialAngle;
		}

		steer = (gyroAngle - corrInitialAngle) * Kp;
		Robot.drive.ArcadeDrive(-1 * calcSpeed, -1 * steer, false);
		SmartDashboard.putNumber("steer", steer);
	}

	private double getCorrAngle(double initialAngle, double distanceDiff) {
		double maxCorrection = 2;
		double correction = distanceDiff * .5;
		if (Math.abs(correction) > maxCorrection)
			correction = (maxCorrection > 0) ? maxCorrection : -1 * maxCorrection;
		return initialAngle + correction;
	}

	private double getSpeedDecel(double distanceRemaining) {
		double newSpeed = m_speed;
		double tmpSpeed = 0;
		if (distanceRemaining > 0) {
			if ((distanceRemaining - coastDistance) <= decelDistance && newSpeed > minDecelSpeed) {
				tmpSpeed = (distanceRemaining - coastDistance) / decelDistance * (1 - minDecelSpeed) + minDecelSpeed;
				if (newSpeed > tmpSpeed)
					newSpeed = tmpSpeed;
			}
		}
		return newSpeed;
	}

	// Make this return true when this Command no longer needs to run execute()
	@Override
	protected boolean isFinished() {
		if (distanceRemaining - coastDistance <= 0)
			return true;
		if (timeLimit > 0 && this.isTimedOut()) {
			exitReason = "Time Limit Exceeded";
			return true;
		}
		return false;
	}

	// Called once after isFinished returns true
	@Override
	protected void end() {
		SmartDashboard.putString("ExitReason", exitReason);
		Robot.drive.Stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted() {
		this.end();
	}
}
